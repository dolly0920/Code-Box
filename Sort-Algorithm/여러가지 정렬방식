import sys
sys.stdin = open("input.txt","rt")

def selection_sort(arr) :
    ## 선택 정렬
    for i in range (len(arr)-1) :
        min_index = i
        for j in range (i+1,len(arr)) :
            if arr[min_index] > arr[j] :
                min_index = j
        arr[i],arr[min_index] = arr[min_index],arr[i]
    return arr

def insertion_sort(arr) : ## 기본 정렬들은 나중에 구현
    ## 삽입 정렬
    return

def merge(left,right) : ## 두 개의 배열을 병합한다.
    i = 0
    j = 0
    sorted_list = [] ## 정렬된 리스트

    while (i<len(left) and j<len(right)) : ## 둘 중 하나의 인덱스가 끝날 때까지 반복됨
        if left[i] < right[j] :
            sorted_list.append(left[i])
            i += 1
        else :
            sorted_list.append(right[j])
            j += 1
    
    while (j<len(right)) : ## 오른쪽 인덱스가 남은 경우
        sorted_list.append(right[j])
        j+=1
    
    while (i<len(left)) : ## 왼쪽 인덱스가 남은 경우
        sorted_list.append(left[i])
        i+=1
    
    return sorted_list ## 합쳤을 때 정렬된 형태의 배열 출력

def merge_sort(arr) :
    if len(arr) <= 1 :
        return arr

    mid = len(arr)//2
    left = arr[:mid]
    right = arr[mid:]

    tmp_left = merge_sort(left)
    tmp_right = merge_sort(right)

    return merge(tmp_left,tmp_right)


def quick_sort(arr) :
    ## 퀵소트 => 이 정렬도 병합정렬과 마찬가지로 분할 정복이다.
    left = 0
    right = len(arr)-1

    def sort(left,right) :
        if left >= right : ## 배열의 길이가 1보다 작거나 같을 때 (잘못된 범위거나 1일 때)
            return

        mid = partition(left,right)
        sort(left,mid-1)
        sort(mid,right)

    def partition(left,right) : ## pivot보다 작은 값은 pivot의 왼쪽으로 큰 값은 오른쪽으로 이동
        pivot = arr[(left+right)//2]
        while left<=right :
            while arr[left] < pivot : ## 가용 범위 : left ~ (left+right)//2
                left += 1
            while arr[right] > pivot : ## 가용 범위 : (left+right)//2 ~ right (why? pivot은 arr[(left+right)//2]이므로
                right -= 1
            if left <= right : ## 만약 left == right라면 (pivot인 경우) left+=1, right-=1이 되어 while문 조건을 위배하여 벗어나게 된다.
                arr[left],arr[right] = arr[right],arr[left] ## swap
                left += 1
                right -= 1 ## 범위를 좁힌다.
        return left
    
    sort(left,right)
    return arr


if __name__ == "__main__" :
    ## 오름차순 정렬
    arr = list(map(int,input().split())) ## 정렬해야할 리스트
    ##print(selection_sort(arr))
    ##print(insertion_sort(arr))
    ##print(merge_sort(arr))
    print(quick_sort(arr))
