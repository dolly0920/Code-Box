## Trie 구현
## 각각의 노드 구현
from collections import deque

class Node :
    def __init__(self,data=None):
        self.data = data ## 단어 하나의 값
        self.flag = None ## 초기값은 None (flag에는 단어가 끝나는 지점에 단어의 완성형태를 넣는다)
        self.children = {} ## dictionary ('이름 : 노드' 형태 저장)


class Trie() :
    def __init__(self):
        self.root = Node()

    ## insert
    def insert(self,data): ## data 추가
        cur_node = self.root

        for x in data : ## x는 data라는 단어의 글자 하나
            if x not in cur_node.children :
                cur_node.children[x] = Node(x)
            cur_node = cur_node.children[x]
        cur_node.flag = data ## 문자의 끝은 flag에 data를 넣는다.

    ## search
    def search(self,data): ## data 찾기
        cur_node = self.root

        for x in data :
            if x not in cur_node.children :
                return False
            cur_node = cur_node.children[x]


        if cur_node.flag == None : ## 비어있다면 (문자의 끝이 아니라면)
            return False

        return True

    ##prefix_search
    def starts_with(self,prefix):
        cur_node = self.root
        result = []

        for x in prefix :
            if x in cur_node.children :
                cur_node = cur_node.children[x]
            else :
                return None ## 없다.

        q = deque()
        q.append(cur_node)
        while q :
            cur_node = q.popleft()
            if cur_node.flag != None :
                result.append(cur_node.flag)
            for d,next_node in cur_node.children.items() : ## key(data),value(node)
                q.append(next_node)

        return result


if __name__ == "__main__" :
    arr = ['hello','hey','her','hamster']
    arr_Trie = Trie()
    for x in arr :
        arr_Trie.insert(x)
    print(arr_Trie.starts_with('he'))
